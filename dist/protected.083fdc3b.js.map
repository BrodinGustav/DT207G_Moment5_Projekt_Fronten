{"mappings":"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","sources":["src/protected.js"],"sourcesContent":["// Definierar URL:s\r\nconst Url = \"http://localhost:3000/api\";\r\nconst url_Protected = `${Url}/Protected`;\r\nconst url_Menu = `${Url}/menu`;\r\nconst url_Delete = `${Url}/menu/`;\r\nconst url_createMenu = `${Url}/createMenu`;\r\nconst url_Update = `${Url}/menu/`;\r\n\r\n// Hämtar element när dokumentet är laddat\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const createMenuForm = document.getElementById(\"createMenuForm\");\r\n    const updateMenuForm = document.getElementById(\"updateMenuForm\");\r\n\r\n    if (!createMenuForm) {\r\n        console.error(\"Kan inte hitta createMenuForm.\");\r\n    } else {\r\n        console.log(\"Meny-formulär hittades.\");\r\n    }\r\n\r\n    if (!updateMenuForm) {\r\n        console.error(\"Kan inte hitta updateMenuForm.\");\r\n    } else {\r\n        console.log(\"Update-formulär hittades.\");\r\n    }\r\n\r\n    // Funktionen för att tömma fälten i ett formulär\r\nfunction resetFormFields(form) {\r\n    form.querySelectorAll('input, textarea').forEach(field => field.value = '');\r\n}\r\n\r\n    //********Funktion för skapa meny *****/\r\n    // Händelselyssnare för skapa meny\r\n    createMenuForm.addEventListener(\"submit\", async function (event) {\r\n        event.preventDefault();\r\n\r\n        // Hämta värden från formulär\r\n        const foodName = document.getElementById(\"foodName\").value;\r\n        const foodDescription = document.getElementById(\"foodDescription\").value;\r\n        const foodPrice = document.getElementById(\"foodPrice\").value;\r\n\r\n        // Validera att alla fält är ifyllda\r\n        if (!foodName || !foodDescription || !foodPrice) {\r\n            console.error(\"Alla fält måste vara ifyllda\");\r\n            return;\r\n        }\r\n\r\n        // Skapa objekt\r\n        const formData = {\r\n            name: foodName,\r\n            description: foodDescription,\r\n            price: foodPrice\r\n        };\r\n\r\n        /***CRUD för skapa meny ***/\r\n        try {\r\n            const response = await fetch(url_createMenu, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                console.log(data.message);\r\n                console.log(data.error);\r\n\r\n                fetchMenu();\r\n\r\n                 // Tömma fälten i skapa meny-formuläret\r\n            resetFormFields(createMenuForm);\r\n\r\n            } else {\r\n                console.error(\"Error\", response);\r\n            }\r\n        } catch (error) {\r\n            console.log(\"Error:\", error);\r\n        }\r\n    });\r\n\r\n    // Händelselyssnare för uppdatera meny\r\n    updateMenuForm.addEventListener(\"submit\", async function (event) {\r\n        event.preventDefault();\r\n\r\n        console.log(\"Formulär skickat\");\r\n\r\n        // Hämta värden från formulär\r\n        const foodName = document.getElementById(\"updateFoodName\").value;\r\n        const foodDescription = document.getElementById(\"updateFoodDescription\").value;\r\n        const foodPrice = document.getElementById(\"updateFoodPrice\").value;\r\n        const menuId = updateMenuForm.getAttribute(\"data-menu-id\");\r\n\r\n        // Validera att alla fält är ifyllda\r\n        if (!foodName || !foodDescription || !foodPrice) {\r\n            console.error(\"Alla fält måste vara ifyllda\");\r\n            return;\r\n        }\r\n\r\n        // Skapa objekt\r\n        const formData = {\r\n            name: foodName,\r\n            description: foodDescription,\r\n            price: foodPrice\r\n        };\r\n\r\n        /**********CRUD för uppdatering av meny ********/\r\n        try {\r\n            const response = await fetch(`${url_Update}${menuId}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                console.log(data.message);\r\n\r\n                fetchMenu();\r\n\r\n                 // Tömma fälten i skapa meny-formuläret\r\n            resetFormFields(updateMenuForm);\r\n            updateMenuForm.style.display = \"none\";\r\n\r\n            } else {\r\n                console.error(\"Error vid uppdatering av meny:\", response);\r\n            }\r\n        } catch (error) {\r\n            console.log(\"Error\", error);\r\n        }\r\n    });\r\n\r\n    // Anropa fetchMenu för att hämta menydata vid sidladdning\r\n    fetchMenu();\r\n});\r\n\r\n// Funktion för hämtning av meny-data\r\nasync function fetchMenu() {\r\n    try {\r\n        const response = await fetch(url_Menu, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Http error! Status: ${response.status}`);\r\n        }\r\n\r\n        const menuData = await response.json();\r\n        renderMenu(menuData);\r\n    } catch (error) {\r\n        console.error('Error fetching menu:', error);\r\n    }\r\n}\r\n\r\n// Funktion för rendering av meny\r\nfunction renderMenu(menuData) {\r\n    const menuContainer = document.querySelector(\".menu-categories\");\r\n    menuContainer.innerHTML = \"\"; // Rensar innehåll\r\n\r\n    menuData.forEach(item => {\r\n        if (!item.name || !item.description || !item.price || !item._id) {\r\n            console.error('Fel format:', item);\r\n            return;\r\n        }\r\n\r\n        const menuItem = document.createElement(\"div\");\r\n        menuItem.className = \"menu-item\";\r\n        menuItem.innerHTML = `\r\n            <h3>${item.name}</h3>\r\n            <p>${item.description}</p>\r\n            <p>Pris: ${item.price}</p>\r\n            <button class=\"update-btn\" data-menu-id=\"${item._id}\">Uppdatera</button>\r\n            <button class=\"deleteBtn\" data-menu-id=\"${item._id}\">Radera</button>\r\n        `;\r\n        menuContainer.appendChild(menuItem);\r\n    });\r\n\r\n    // Lägg till händelselyssnare för uppdateringsknapparna\r\n    document.querySelectorAll(\".update-btn\").forEach(button => {\r\n        button.addEventListener(\"click\", function () {\r\n            const menuId = this.getAttribute(\"data-menu-id\");\r\n            openUpdateForm(menuId);\r\n        });\r\n    });\r\n\r\n    document.querySelectorAll(\".deleteBtn\").forEach(button => {\r\n        button.addEventListener(\"click\", function () {\r\n            const menuId = this.getAttribute(\"data-menu-id\");\r\n            deleteMenu(menuId);\r\n        });\r\n    });\r\n}\r\n\r\n// Funktion för att öppna uppdateringsformuläret\r\nfunction openUpdateForm(menuId) {\r\n    const updateForm = document.getElementById(\"updateMenuForm\");\r\n    const updateh2 = document.getElementById(\"updateh2\");\r\n    updateForm.setAttribute(\"data-menu-id\", menuId);\r\n    updateForm.style.display = \"block\"; // Visa formuläret\r\n    updateh2.style.display = \"block\"; // Visa överskrift\r\n}\r\n\r\n// Funktion för att radera meny\r\nasync function deleteMenu(_id) {\r\n    try {\r\n        const response = await fetch(`${url_Delete}${_id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Http error! Status: ${response.status}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        console.log(result);\r\n        fetchMenu();\r\n        console.log(\"Meny raderad!\");\r\n    } catch (error) {\r\n        console.error(\"Error vid radering av meny:\", error);\r\n    }\r\n}\r\n\r\n// Funktion för att logga ut\r\nfunction logOut() {\r\n    localStorage.removeItem(\"token\");\r\n    window.location.href = 'index.html';\r\n}"],"names":[],"version":3,"file":"protected.083fdc3b.js.map","sourceRoot":"/__parcel_source_root/"}